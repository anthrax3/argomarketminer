/** Declaration file generated by dts-gen */

// account
declare module "@oanda/v20/account" {
    import * as context from "@oanda/v20/context";
    import { Definition } from "@oanda/v20/base";
    import * as order from "@oanda/v20/order";
    import * as position from "@oanda/v20/position";
    import * as trade from "@oanda/v20/trade";
    import * as transaction from "@oanda/v20/transaction";

    class Account extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        alias: string;
        currency: string;
        balance: number;
        createdByUserID: string;
        createdTime: Date;
        pl: number;
        resettabledPL: number;
        resettabledPLTime: Date;
        marginRate: number;
        marginCallEnterTime: Date;
        marginCallExtensionCount: number;
        lastMarginCallExtensionTime: Date;
        openTradeCount: number;
        openPositionCount: number;
        pendingOrderCount: number;
        hedgingEnabled: boolean;
        unrealizedPL: number;
        NAV: number;
        marginUsed: number;
        marginAvailable: number;
        positionValue: number;
        marginCloseoutUnrealizedPL: number;
        marginCloseoutNAV: number;
        marginCloseoutMarginUsed: number;
        marginCloseoutPercent: number;
        withdrawalLimit: number;
        marginCallMarginUsed: number;
        marginCallPercent: number;
        lastTransactionID: string;
        trades: trade.TradeSummary[];
        orders: order.Order[];
    }

    class AccountChanges extends Definition {
        constructor(data: { [key: string]: any });
        ordersCreated: order.Order[];
        ordersCancelled: order.Order[];
        ordersFilled: order.Order[];
        ordersTriggered: order.Order[];
        tradesOpened: trade.Trade[];
        tradesReduced: trade.Trade[];
        tradesClosed: trade.Trade[];
        positions: position.Position[];
        transactions: transaction.Transaction[];
    }

    class AccountProperties extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        mt4AccountID: number;
        tags: string[];
    }

    class AccountState extends Definition {
        constructor(data: { [key: string]: any });
        unrealizedPL: number;
        NAV: number;
        marginUsed: number;
        marginAvailable: number;
        positionValue: number;
        marginCloseoutUnrealizedPL: number;
        marginCloseoutNAV: number;
        marginCloseoutMarginUsed: number;
        marginCloseoutPercent: number;
        withdrawalLimit: number;
        marginCallMarginUsed: number;
        marginCallPercent: number;
        orders: order.DynamicOrderState[];
        trades: trade.CalculatedTradeState[];
        positions: position.CalculatedPositionState[];
    }

    class AccountSummary extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        alias: string;
        currency: string;
        balance: number;
        createdByUserID: string;
        createdTime: Date;
        pl: number;
        resettabledPL: number;
        resettabledPLTime: Date;
        marginRate: number;
        marginCallEnterTime: Date;
        marginCallExtensionCount: number;
        lastMarginCallExtensionTime: Date;
        openTradeCount: number;
        openPositionCount: number;
        pendingOrderCount: number;
        hedgingEnabled: boolean;
        unrealizedPL: number;
        NAV: number;
        marginUsed: number;
        marginAvailable: number;
        positionValue: number;
        marginCloseoutUnrealizedPL: number;
        marginCloseoutNAV: number;
        marginCloseoutMarginUsed: number;
        marginCloseoutPercent: number;
        withdrawalLimit: number;
        marginCallMarginUsed: number;
        marginCallPercent: number;
        lastTransactionID: string;
    }

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        Account: Account;
        AccountState: AccountState;
        AccountProperties: AccountProperties;
        AccountSummary: AccountSummary;
        AccountChanges: AccountChanges;

        list(
            responseHandler: (response: context.Response) => void
        ): void;

        get(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        summary(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        instruments(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        configure(
            accountID: string,
            bodyParams: { [key: string]: any },
            responseHandler: (response: context.Response) => void
        ): void;

        changes(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;
    }
}

// base
declare module "@oanda/v20/base" {
    class Property {
        constructor(name: string, displayName: string, description: string, typeClass: string, typeName: string);
        name: string;
        displayName: string;
        description: string;
        typeClass: string;
        typeName: string;
    }

    class Field extends Property {
        constructor(property: Property, value: any);
        value: any;
    }

    class Definition {
        constructor();
        _summaryFormat: string;
        _nameFormat: string;
        _properties: Property[];
        toJSON(key: string): { [key: string]: any };
        nameOf(): string;
        summary(): string;
        title(): string;
        toString(): string;
        fields(): Field[];
    }
}

// context
declare module "@oanda/v20/context" {
    import * as account from "@oanda/v20/account";
    import * as instrument from "@oanda/v20/instrument";
    import * as order from "@oanda/v20/order";
    import * as position from "@oanda/v20/position";
    import * as pricing from "@oanda/v20/pricing";
    import * as primitives from "@oanda/v20/primitives";
    import * as transaction from "@oanda/v20/transaction";
    import * as trade from "@oanda/v20/trade";
    import * as user from "@oanda/v20/user";

    class Response {
        method: string;
        path: string;
        statusCode: string;
        statusMessage: string;
        contentType: string;
        rawBody: {};
        body: {};

        isSuccess(): boolean;
        isRedirection(): boolean;
        isClientError(): boolean;
        isServerError(): boolean;
        isError(): boolean;
    }

    class Context {
        application: string;
        username: string;
        hostname: string;
        port: number;
        headers: { [key: string]: string };
        token: string;

        account: account.EntitySpec;
        order: order.EntitySpec;
        position: position.EntitySpec;
        user: user.EntitySpec;
        transaction: transaction.EntitySpec;
        pricing: pricing.EntitySpec;
        primitives: primitives.EntitySpec;
        trade: trade.EntitySpec;
        instrument: instrument.EntitySpec;

        setToken(
            token: string
        ): void;

        request(
            method: string,
            path: string,
            body: { [key: string]: any },
            responseHandler: (response: Response) => void
        ): void;
    }
}

// instrument
declare module "@oanda/v20/instrument" {
    import { Definition } from "@oanda/v20/base";
    import * as context from "@oanda/v20/context";

    class Candlestick extends Definition {
        constructor(data: { [key: string]: any });
        time: Date;
        bid: CandlestickData;
        ask: CandlestickData;
        mid: CandlestickData;
        volume: number;
        complete: boolean;
    }

    class CandlestickData extends Definition {
        constructor(data: { [key: string]: any });
        o: number;
        h: number;
        l: number;
        c: number;
    }

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        Candlestick: Candlestick;
        CandlestickData: CandlestickData;

        candles(
            instrument: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;
    }
}

// order
declare module "@oanda/v20/order" {
    import * as context from "@oanda/v20/context";
    import { Definition } from "@oanda/v20/base";
    import * as transaction from "@oanda/v20/transaction";

    class DynamicOrderState extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        trailingStopValue: number;
        triggerDistance: number;
        isTriggerDistanceExact: boolean;
    }

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        OrderIdentifier: OrderIdentifier;
        DynamicOrderState: DynamicOrderState;
        Order: Order;
        MarketOrder: MarketOrder;
        LimitOrder: LimitOrder;
        StopOrder: StopOrder;
        MarketIfTouchedOrder: MarketIfTouchedOrder;
        TakeProfitOrder: TakeProfitOrder;
        StopLossOrder: StopLossOrder;
        TrailingStopLossOrder: TrailingStopLossOrder;
        OrderRequest: OrderRequest;
        MarketOrderRequest: MarketOrderRequest;
        LimitOrderRequest: LimitOrderRequest;
        StopOrderRequest: StopOrderRequest;
        MarketIfTouchedOrderRequest: MarketIfTouchedOrderRequest;
        TakeProfitOrderRequest: TakeProfitOrderRequest;
        StopLossOrderRequest: StopLossOrderRequest;
        TrailingStopLossOrderRequest: TrailingStopLossOrderRequest;

        create(
            accountID: string,
            bodyParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        list(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        listPending(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        get(
            accountID: string,
            orderSpecifier: string,
            responseHandler: (response: context.Response) => void
        ): void;

        replace(
            accountID: string,
            orderID: string,
            bodyParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        cancel(
            accountID: string,
            orderSpecifier: string,
            responseHandler: (response: context.Response) => void
        ): void;

        setClientExtensions(
            accountID: string,
            orderSpecifier: string,
            bodyParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        market(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        limit(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        limitReplace(
            accountID: string,
            orderID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        stop(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        stopReplace(
            accountID: string,
            orderID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        marketIfTouched(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        marketIfTouchedReplace(
            accountID: string,
            orderID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        takeProfit(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        takeProfitReplace(
            accountID: string,
            orderID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        stopLoss(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        stopLossReplace(
            accountID: string,
            orderID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        trailingStopLoss(
            accountID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );

        trailingStopLossReplace(
            accountID: string, orderID: string,
            orderSpec: { [key: string]: any },
            responseCallback: (response: context.Response) => void
        );
    }

    class LimitOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        instrument: string;
        units: number;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
        fillingTransactionID: string;
        filledTime: Date;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string[];
        cancellingTransactionID: string;
        cancelledTime: Date;
        replacesOrderID: string;
        replacedByOrderID: string;
    }

    class LimitOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        instrument: string;
        units: number;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        clientExtensions: transaction.ClientExtensions;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
    }

    class MarketIfTouchedOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        initialMarketPrice: number;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
        fillingTransactionID: string;
        filledTime: string;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string;
        cancellingTransactionID: string;
        cancelledTime: string;
        replacesOrderID: string;
        replacedByOrderID: string;
    }

    class MarketIfTouchedOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        clientExtensions: transaction.ClientExtensions;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
    }

    class MarketOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        instrument: string;
        units: number;
        timeInForce: string;
        priceBound: number;
        positionFill: string;
        tradeClose: transaction.MarketOrderTradeClose;
        longPositionCloseout: transaction.MarketOrderPositionCloseout;
        shortPositionCloseout: transaction.MarketOrderPositionCloseout;
        marginCloseout: transaction.MarketOrderMarginCloseout;
        delayedTradeClose: transaction.MarketOrderDelayedTradeClose;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
        fillingTransactionID: string;
        filledTime: Date;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string[];
        cancellingTransactionID: string;
        cancelledTime: Date;
    }

    class MarketOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        instrument: string;
        units: number;
        timeInForce: string;
        priceBound: number;
        positionFill: string;
        clientExtensions: transaction.ClientExtensions;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
    }

    class Order extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
    }

    class OrderIdentifier extends Definition {
        constructor(data: { [key: string]: any });
        orderID: string;
        clientOrderID: string;
    }

    class OrderRequest extends Definition {
        constructor(data: { [key: string]: any });
    }

    class StopLossOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        fillingTransactionID: string;
        filledTime: Date;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string[];
        cancellingTransactionID: string;
        cancelledTime: Date;
        replacesOrderID: string;
        replacedByOrderID: string;
    }

    class StopLossOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        clientExtensions: transaction.ClientExtensions;
    }

    class StopOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
        fillingTransactionID: string;
        filledTime: Date;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string[];
        cancellingTransactionID: string;
        cancelledTime: Date;
        replacesOrderID: string;
        replacedByOrderID: string;
    }

    class StopOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        clientExtensions: transaction.ClientExtensions;
        takeProfitOnFill: transaction.TakeProfitDetails;
        stopLossOnFill: transaction.StopLossDetails;
        trailingStopLossOnFill: transaction.TrailingStopLossDetails;
        tradeClientExtensions: transaction.ClientExtensions;
    }

    class TakeProfitOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        fillingTransactionID: string;
        filledTime: Date;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string[];
        cancellingTransactionID: string;
        cancelledTime: Date;
        replacesOrderID: string;
        replacedByOrderID: string;
    }

    class TakeProfitOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        clientExtensions: transaction.ClientExtensions;
    }

    class TrailingStopLossOrder extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        createTime: Date;
        state: string;
        clientExtensions: transaction.ClientExtensions;
        type: string;
        tradeID: string;
        clientTradeID: string;
        distance: number;
        timeInForce: string;
        gtdTime: Date;
        trailingStopValue: number;
        fillingTransactionID: string;
        filledTime: Date;
        tradeOpenedID: string;
        tradeReducedID: string;
        tradeClosedIDs: string[];
        cancellingTransactionID: string;
        cancelledTime: Date;
        replacesOrderID: string;
        replacedByOrderID: string;
    }

    class TrailingStopLossOrderRequest extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        tradeID: string;
        clientTradeID: string;
        distance: number;
        timeInForce: string;
        gtdTime: Date;
        clientExtensions: transaction.ClientExtensions;
    }
}

// position
declare module "@oanda/v20/position" {
    import { Definition } from "@oanda/v20/base";
    import * as context from "@oanda/v20/context";

    class CalculatedPositionState extends Definition {
        constructor(data: { [key: string]: any });
        instrument: string;
        netUnrealizedPL: number;
        longUnrealizedPL: number;
        shortUnrealizedPL: number;
    }

    class EntitySpec {
        constructor(context: context.Context);

        list(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        listOpen(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        get(
            accountID: string,
            instrument: string,
            responseHandler: (response: context.Response) => void
        ): void;

        close(
            accountID: string,
            instrument: string,
            bodyParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;
    }

    class Position extends Definition {
        constructor(data: { [key: string]: any });
        instrument: string;
        pl: number;
        unrealizedPL: number;
        resettablePL: number;
        long: PositionSide;
        short: PositionSide;
    }

    class PositionSide extends Definition {
        constructor(data: { [key: string]: any });
        units: number;
        averagePrice: number;
        tradeIDs: string[];
        pl: number;
        unrealizedPL: number;
        resettablePL: number;
    }
}

// pricing
declare module "@oanda/v20/pricing" {
    import { Definition } from "@oanda/v20/base";
    import * as context from "@oanda/v20/context";

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        Price: Price;
        PriceBucket: PriceBucket;
        UnitsAvailable: UnitsAvailable;
        UnitsAvailableDetails: UnitsAvailableDetails;
        QuoteHomeConversionFactors: QuoteHomeConversionFactors;
        PricingHeartbeat: PricingHeartbeat;

        get(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        stream(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;
    }

    class Price extends Definition {
        constructor(data: { [key: string]: any });
        type; string;
        instrument: string;
        time: Date;
        status: string;
        bids: PriceBucket[];
        asks: PriceBucket[];
        closeoutBid: number;
        closeoutAsk: number;
        quoteHomeConversionFactors: QuoteHomeConversionFactors;
        unitsAvailable: UnitsAvailable;
    }

    class PriceBucket extends Definition {
        constructor(data: { [key: string]: any });
        price: number;
        this: number;
    }

    class PricingHeartbeat extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        time: Date;
    }

    class QuoteHomeConversionFactors extends Definition {
        constructor(data: { [key: string]: any });
        positiveUnits: number;
        negativeUnits: number;
    }

    class UnitsAvailableDetails extends Definition {
        constructor(data: { [key: string]: any });
        long: number;
        short: number;
    }

    class UnitsAvailable extends Definition {
        constructor(data: { [key: string]: any });
        default: UnitsAvailableDetails;
        reduceFirst: UnitsAvailableDetails;
        reduceOnly: UnitsAvailableDetails;
        openOnly: UnitsAvailableDetails;
    }
}

// primitives
declare module "@oanda/v20/primitives" {
    import { Definition } from "@oanda/v20/base";
    import * as context from "@oanda/v20/context";

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        Instrument: Instrument;
    }

    class Instrument extends Definition {
        constructor(data: { [key: string]: string });
        name: string;
        type: string;
        displayName: string;
        pipLocation: number;
        displayPrecision: number;
        tradeUnitsPrecision: number;
        minimumTradeSize: number;
        maximumTrailingStopDistance: number;
        minimumTrailingStopDistance: number;
        maximumPositionSize: number;
        maximumOrderUnits: number;
        marginRate: number;
    }
}

// trade
declare module "@oanda/v20/trade" {
    import * as context from "@oanda/v20/context";
    import { Definition } from "@oanda/v20/base";
    import * as order from "@oanda/v20/order";
    import * as transaction from "@oanda/v20/transaction";

    class CalculatedTradeState extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        unrealizedPL: number;
    }

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        Trade: Trade;
        TradeSummary: TradeSummary;
        CalculatedTradeState: CalculatedTradeState;

        list(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        listOpen(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        get(
            accountID: string,
            tradeSpecifier: string,
            responseHandler: (response: context.Response) => void
        ): void;

        close(
            accountID: string,
            tradeSpecifier: string,
            bodyParams: { [key: string]: any },
            responseHandler: (response: context.Response) => void
        ): void;

        setClientExtensions(
            accountID: string,
            tradeSpecifier: string,
            bodyParams: { [key: string]: any },
            responseHandler: (response: context.Response) => void
        ): void;

        setDependentOrders(
            accountID: string,
            tradeSpecifier: string,
            bodyParams: { [key: string]: any },
            responseHandler: (response: context.Response) => void
        ): void;
    }

    class Trade extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        instrument: string;
        price: number;
        openTime: Date;
        state: string;
        initialUnits: number;
        currentUnits: number;
        realizedPL: number;
        unrealizedPL: number;
        averageClosePrice: number;
        closingTransactionIDs: string[];
        financing: number
        closeTime: Date;
        clientExtensions: transaction.ClientExtensions;
        takeProfitOrder: order.TakeProfitOrder;
        stopLossOrder: order.StopLossOrder;
        trailingStopLossOrder: order.TrailingStopLossOrder;
    }

    class TradeSummary extends Definition {
        id: string;
        instrument: string;
        price: number;
        openTime: Date;
        state: string;
        initialUnits: number;
        currentUnits: number;
        realizedPL: number;
        unrealizedPL: number;
        closingTransactionIDs: string[];
        financing: string;
        closeTime: Date;
        clientExtensions: transaction.ClientExtensions;
        takeProfitOrderID: string;
        stopLossOrderID: string;
        trailingStopLossOrderID: string;
    }
}

// transaction
declare module "@oanda/v20/transaction" {
    import * as context from "@oanda/v20/context";
    import { Definition } from "@oanda/v20/base";

    class ClientConfigureRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        alias: string;
        marginRate: number;
        rejectReason: string;
    }

    class ClientConfigureTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        alias: string;
        marginRate: number;
    }

    class ClientExtensions extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        tag: string;
        comment: string;
    }

    class CloseTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
    }

    class CreateTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        divisionID: string;
        siteID: string;
        accountUserID: string;
        accountNumber: string;
        homeCurrency: string;
    }

    class DailyFinancingTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        requestID: string;
        type: string;
        financing: number;
        accountBalance: number;
        accountFinancingMode: string;
        positionFinancings: PositionFinancing[];
    }

    class DelayedTradeClosureTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        reason: string;
        tradeIDs: string[];
    }

    class EntitySpec {
        constructor(context: context.Context);

        list(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        get(
            accountID: string,
            transactionID: string,
            responseHandler: (response: context.Response) => void
        ): void;

        range(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        since(
            accountID: string,
            queryParams: { [key: string]: string },
            responseHandler: (response: context.Response) => void
        ): void;

        stream(
            accountID: string,
            responseHandler: (response: context.Response) => void
        ): void;
    }

    class LimitOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type; string;
        instrument: string;
        units: number;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        intendedReplacesOrderID: string;
        rejectReason: string;
    }

    class LimitOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        replacesOrderID: string;
        replacedOrderCancelTransactionID: string;
    }

    class LiquidityRegenerationSchedule extends Definition {
        constructor(data: { [key: string]: any });
        steps: LiquidityRegenerationScheduleStep[];
    }

    class LiquidityRegenerationScheduleStep extends Definition {
        constructor(data: { [key: string]: any });
        timestamp: string;
        bidLiquidityUsed: number;
        askLiquidityUsed: number;
    }

    class MarginCallEnterTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
    }

    class MarginCallExitTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
    }

    class MarginCallExtendTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        extensionNumber: number;
    }

    class MarketIfTouchedOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        intendedReplacesOrderID: string;
        rejectReason: string;
    }

    class MarketIfTouchedOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        replacesOrderID: string;
        replacedOrderCancelTransactionID: string;
    }

    class MarketOrderDelayedTradeClose extends Definition {
        constructor(data: { [key: string]: any });
        tradeID: string;
        clientTradeID: string;
        sourceTransactionID: string;
    }

    class MarketOrderMarginCloseout extends Definition {
        constructor(data: { [key: string]: any });
        reason: string;
    }

    class MarketOrderPositionCloseout extends Definition {
        constructor(data: { [key: string]: any });
        instrument: string
        units: number
    }

    class MarketOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        timeInForce: string;
        priceBound: number;
        positionFill: string;
        tradeClose: MarketOrderTradeClose;
        longPositionCloseout: MarketOrderPositionCloseout;
        shortPositionCloseout: MarketOrderPositionCloseout;
        marginCloseout: MarketOrderMarginCloseout;
        delayedTradeClose: MarketOrderDelayedTradeClose;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        rejectReason: string;
    }

    class MarketOrderTradeClose extends Definition {
        constructor(data: { [key: string]: any });
        tradeID: string;
        clientTradeID: string;
        units: string;
    }

    class MarketOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        timeInForce: string;
        priceBound: number;
        positionFill: string;
        tradeClose: MarketOrderTradeClose;
        longPositionCloseout: MarketOrderPositionCloseout;
        shortPositionCloseout: MarketOrderPositionCloseout;
        marginCloseout: MarketOrderMarginCloseout;
        delayedTradeClose: MarketOrderDelayedTradeClose;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
    }

    class OpenTradeFinancing extends Definition {
        constructor(data: { [key: string]: any });
        tradeID: string;
        financing: number;
    }

    class OrderCancelRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        orderID: string;
        clientOrderID: string;
        reason: string;
        rejectReason: string;
    }

    class OrderCancelTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        orderID: string;
        clientOrderID: string;
        reason: string;
        replacedByOrderID: string;
    }

    class OrderClientExtensionsModifyRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        orderID: string;
        clientOrderID: string;
        orderClientExtensionsModify: ClientExtensions;
        tradeClientExtensionsModify: ClientExtensions;
        rejectReason: string;
    }

    class OrderClientExtensionsModifyTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        orderID: string;
        clientOrderID: string;
        orderClientExtensionsModify: ClientExtensions;
        tradeClientExtensionsModify: ClientExtensions;
    }

    class OrderFillTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        orderID: string;
        clientOrderID: string;
        instrument: string;
        units: number;
        price: number;
        reason: string;
        pl: number;
        financing: number;
        accountBalance: number;
        tradeOpened: TradeOpen;
        tradesClosed: TradeReduce[];
        tradeReduced: TradeReduce;
    }

    class PositionFinancing extends Definition {
        constructor(data: { [key: string]: any });
        instrumentID: string;
        financing: number;
        openTradeFinancings: OpenTradeFinancing[];
    }

    class ReopenTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
    }

    class ResetResettablePLTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
    }

    class StopLossDetails extends Definition {
        constructor(data: { [key: string]: any });
        price: number;
        timeInForce: string;
        gtdTime: Date;
        clientExtensions: ClientExtensions;
    }

    class StopLossOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        reason: string;
        clientExtensions: ClientExtensions;
        orderFillTransactionID: string;
        intendedReplacesOrderID: string;
        rejectReason: string;
    }

    class StopLossOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        reason: string;
        clientExtensions: ClientExtensions;
        orderFillTransactionID: string;
        replacesOrderID: string;
        replacedOrderCancelTransactionID: string;
    }

    class StopOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        intendedReplacesOrderID: string;
        rejectReason: string;
    }

    class StopOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        instrument: string;
        units: number;
        price: number;
        priceBound: number;
        timeInForce: string;
        gtdTime: Date;
        positionFill: string;
        reason: string;
        clientExtensions: ClientExtensions;
        takeProfitOnFill: TakeProfitDetails;
        stopLossOnFill: StopLossDetails;
        trailingStopLossOnFill: TrailingStopLossDetails;
        tradeClientExtensions: ClientExtensions;
        replacesOrderID: string;
        replacedOrderCancelTransactionID: string;
    }

    class TakeProfitDetails extends Definition {
        constructor(data: { [key: string]: any });
        price: string;
        timeInForce: string;
        gtdTime: Date;
        clientExtensions: ClientExtensions;
    }

    class TakeProfitOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        Date: string;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        reason: string;
        clientExtensions: ClientExtensions;
        orderFillTransactionID: string;
        intendedReplacesOrderID: string;
        rejectReason: string;
    }

    class TakeProfitOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        price: number;
        timeInForce: string;
        gtdTime: Date;
        reason: string;
        clientExtensions: ClientExtensions;
        orderFillTransactionID: string;
        replacesOrderID: string;
        replacedOrderCancelTransactionID: string;
    }

    class TradeClientExtensionsModifyRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        tradeClientExtensionsModify: ClientExtensions;
        rejectReason: string;
    }

    class TradeClientExtensionsModifyTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        tradeClientExtensionsModify: ClientExtensions;
    }

    class TradeOpen extends Definition {
        constructor(data: { [key: string]: any });
        tradeID: string;
        units: number;
        clientExtensions: ClientExtensions;
    }

    class TradeReduce extends Definition {
        constructor(data: { [key: string]: any });
        tradeID: string;
        units: number;
        realizedPL: number;
        financing: number;
    }

    class TrailingStopLossDetails extends Definition {
        constructor(data: { [key: string]: any });
        distance: number;
        timeInForce: string;
        gtdTime: Date;
        clientExtensions: ClientExtensions;
    }

    class TrailingStopLossOrderRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        tradeID: string;
        clientTradeID: string;
        distance: number;
        timeInForce: string;
        gtdTime: Date;
        reason: string;
        clientExtensions: ClientExtensions;
        orderFillTransactionID: string;
        intendedReplacesOrderID: string;
        rejectReason: string;
    }

    class TrailingStopLossOrderTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type; string;
        tradeID: string;
        clientTradeID: string;
        distance: number;
        timeInForce: string;
        gtdTime: Date;
        reason: string;
        clientExtensions: ClientExtensions;
        orderFillTransactionID: string;
        replacesOrderID: string;
        replacedOrderCancelTransactionID: string;
    }

    class Transaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;

        static create(transaction: { [key: string]: any }): any;
    }

    class TransactionHeartbeat extends Definition {
        constructor(data: { [key: string]: any });
        type: string;
        lastTransactionID: string;
        time: Date;
    }

    class TransferFundsRejectTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        amount: number;
        fundingReason: string;
        rejectReason: string;
    }

    class TransferFundsTransaction extends Definition {
        constructor(data: { [key: string]: any });
        id: string;
        time: Date;
        userID: string;
        accountID: string;
        batchID: string;
        type: string;
        amount: number;
        fundingReason: string;
        accountBalance: number;
    }

    class VWAPReceipt extends Definition {
        constructor(data: { [key: string]: any });
        units: number;
        price: number;
    }
}

// user
declare module "@oanda/v20/user" {
    import { Definition } from "@oanda/v20/base";
    import * as context from "@oanda/v20/context";

    class UserInfo extends Definition {
        username: string;
        userID: string;
        country: string;
        emailAddress: string;
    }

    class UserInfoExternal extends Definition {
        userID: string;
        country: string;
        FIFO: string;
    }

    class EntitySpec {
        constructor(context: context.Context);
        context: context.Context;
        UserInfo: UserInfo;
        UserInfoExternal: UserInfoExternal;

        getInfo(
            userSpecifier: string,
            responseHandler: (response: context.Response) => void
        ): void;

        getExternalInfo(
            userSpecifier: string,
            responseHandler: (response: context.Response) => void
        ): void;
    }
}
